function [peaks] = DetectOscillationPeak(lfp,varargin)
%MTSpectrogrampt 
%    The spectrogram is computed using the <a href="http://www.chronux.org">chronux</a> toolbox.
% =========================================================================
%     Properties    Values
%    -------------------------------------------------------------------------
%     'bandwidth'   Bandwidth to filter the oscillation
%    =========================================================================
% 
% Defaults

bandwidth = [4 12];

if nargin < 1 | mod(length(varargin),2) ~= 0,
    error('Incorrect number of parameters (type ''help <a href="matlab:help MTSpectrogrampt">MTSpectrogrampt</a>'' for details).');
end

for i = 1:2:length(varargin)
    if ~ischar(varargin{i})
        error(['Parameter ' num2str(i+2) ' is not a property (type ''help <a href="matlab:help MTSpectrogram">MTSpectrogram</a>'' for details).']);
    end
    switch(lower(varargin{i}))
        case 'bandwidth'
            bandwidth = varargin{i+1};
            if size(bandwith)~= 2 
                error('Incorrect value for property ''bandwith'' (type ''help <a href="matlab:help MTSpectrogram">MTSpectrogram</a>'' for details).');
            end
        otherwise
            error(['Unknown property ''' num2str(varargin{i}) ''' (type ''help <a href="matlab:help MTSpectrogrampt">MTSpectrogrampt</a>'' for details).']);
    end
end


filtered_lfp = Filter(lfp,'passband',bandwidth);
[peaks] = findpeaks(filtered_lfp(:,2),0);
[troughs] = findpeaks(-filtered_lfp(:,2),0);

peaks.time = filtere

plot(filtered_lfp(:,1),filtered_lfp(:,2))
hold
scatter(filtered_lfp(peaks.loc,1),filtered_lfp(peaks.loc,2));
scatter(filtered_lfp(troughs.loc,1),filtered_lfp(troughs.loc,2));


peaks.intervals = [];
troughs.intervals = [];



for i = 1:size(peaks.loc)
    t_peak = filtered_lfp(peaks.loc(i),1);
    filtered_lfp(t_,1);
    t_trough = t_trough(1);

    peaks.intervals = [peaks.intervals ; [t_peak t_peak + (t_trough-t_peak)/2]];
    troughs.intervals = [troughs.intervals ;[t_trough - (t_trough-t_peak)/2 t_trough]]
end

PlotIntervals(peaks.intervals)
disp("hehe")
end

